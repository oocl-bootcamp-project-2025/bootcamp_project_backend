name: Release Branch CI/CD to PROD

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        
      - name: Run tests
        run: ./gradlew test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "[Release Report] JUnit Tests Report"
          path: build/test-results/test/*.xml
          reporter: java-junit

  deploy-prod:
    needs: [test]
    runs-on: ubuntu-latest
    environment: prod  # ‰ΩøÁî®GitHub Environment‰øùÊä§ÔºåÈúÄË¶ÅÊâãÂä®approval
    if: github.ref == 'refs/heads/release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build application
        run: ./gradlew assemble

      - name: Install Railway CLI
        if: github.event_name != 'pull_request'
        run: npm install -g @railway/cli

      - name: Deploy to Railway PROD Service
        run: |
          echo "Starting deployment to Railway PROD..."
          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

      - name: PROD Health Check
        run: |
          echo "Starting PROD health check (5 minutes max)..."
          
          SERVICE_URL="${{ secrets.SERVICE_BASE_URL }}"
          
          # Wait 60 seconds for service startup
          echo "Waiting 60 seconds for PROD service to start..."
          sleep 60
          
          # 5-minute health check with 30-second intervals
          for i in {1..10}; do
            echo "PROD health check attempt $i/10..."
            if curl -s -f --max-time 30 "${SERVICE_URL}/health" > /dev/null 2>&1; then
              echo "‚úÖ PROD Service is healthy!"
              exit 0
            fi
            if [ $i -lt 10 ]; then
              echo "‚è≥ PROD Service not ready, waiting 30s..."
              sleep 30
            fi
          done
          echo "‚ùå PROD Health check failed after 5 minutes"
          exit 1

      - name: Deployment Success Notification
        run: |
          echo "üéâ Release deployment completed successfully!"
          echo "All environments deployed and healthy!"
